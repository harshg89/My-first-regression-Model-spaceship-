# -*- coding: utf-8 -*-
"""spaceship_kaggle

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZsalqoqmeprBrcDTNBnRZy3jIre5-Mm8
"""

import pandas as pd
train = pd.read_csv('/content/train.csv')

X = train.iloc[:, :-1].values
y = train.iloc[:, -1].values

X.shape

train.isna().sum()

len(train['PassengerId'])

grp=train.groupby(['HomePlanet'])
grp.median().loc['Earth']

train.aggregate(['mean','median'])

train.head()

train.VIP.fillna(value=False,inplace=True)
train.VIP.value_counts()

train.CryoSleep.replace({'False':False},inplace=True)
train.CryoSleep.value_counts()

train.isna().sum()

train['HomePlanet'].isna().sum()

train['Spa'].fillna(value=0.0,inplace=True)

train.drop(columns='Name',inplace=True)

train.isna().sum()

X_train.shape

X

df1=pd.read_csv('/content/test.csv')

df1.isna().sum()

df1.drop(columns=['PassengerId','Name','Cabin'],inplace=True)

df1.isna().sum()

df1['VRDeck'].fillna(value=0.0,inplace=True)

df1

X.shape

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [5])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

X_train[:,9]

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [9])], remainder='passthrough')
X = np.array(ct.fit_transform(X))

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X[:, 10:] = sc.fit_transform(X[:,10:])

from sklearn.svm import SVC
classifier = SVC(kernel = 'rbf', random_state = 0)
classifier.fit(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))
Y_prediction=[]
for i in range(len(y_pred)):
  if y_pred[i]>0.5:
    Y_prediction.append(1)
  else:
    Y_prediction.append(0)
y2=np.array(Y_prediction)
print(np.concatenate((y2.reshape(len(Y_prediction),1), y2.reshape(len(y_test),1)),1))

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y2)
print(cm)
accuracy_score(y_test, y2)

"""NOW for the test set

"""

df=pd.read_csv('/content/test.csv')

df

df.drop(columns=['PassengerId','Cabin','Name'],inplace=True)

df.shape

df.isna().sum()

df['HomePlanet'].fillna(value='Earth',inplace=True)

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
df = np.array(ct.fit_transform(df))

df.shape

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
df = np.array(ct.fit_transform(df))

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [5])], remainder='passthrough')
df = np.array(ct.fit_transform(df))

import numpy as np 
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [9])], remainder='passthrough')
df = np.array(ct.fit_transform(df))

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
df[:, 10:] = sc.fit_transform(df[:,10:])

y_ans = classifier.predict(df)

y_ans

sample=pd.read_csv('/content/sample_submission.csv')

sample

sample.drop(columns='Transported',inplace=True)

sample['Transported']=y_ans

sample.set_index('PassengerId',inplace=True)

sample['Transported'].value_counts()

from google.colab import files
sample.to_csv('sample_solution.csv')
files.download('sample_solution.csv')

import pandas as pd
sample=pd.read_csv('/content/sample_solution.csv')
transported=sample.iloc[:,1]

sample_solution

for i in range (len(transported)):
  if transported[i]==1:
    sample.Transported.replace({1:True},inplace=True)
  else:   
    sample.Transported.replace({0:False},inplace=True)